Chinook Music Store Database

The Chinook database is a comprehensive dataset designed to help analyze the operations of a digital music store. 
It includes customer information, employee invoices, music tracks, albums, artists, genres, and more. 
This dataset is structured to facilitate various types of analysis, from sales performance to customer behavior and music catalog management.


#1. Show Customers (their full names, customer ID, and country) who are not in the US. (Hint: != or <> can be used to say "is not equal to").

SELECT FirstName, LastName, CustomerId, Country 
FROM chinook.customers 
WHERE Country != "USA";

#2. Show only the Customers from Brazil.

SELECT * FROM chinook.customers 
WHERE Country = "Brazil" ;

#3. Find the Invoices of customers who are from Brazil. The resulting table should show the customer's full name, Invoice ID, Date of the invoice, and billing country.

SELECT cust.FirstName, cust.LastName, inv.InvoiceId, inv.BillingCountry, inv.InvoiceDate
FROM chinook.invoices as inv 
LEFT JOIN chinook.customers as cust 
on inv.CustomerId = cust.CustomerId 
WHERE inv.BillingCountry = "Brazil";

#4. Show the Employees who are Sales Agents.

SELECT * FROM chinook.Employees
WHERE Title = "Sales Support Agent" ;

#5. Find a unique/distinct list of billing countries from the Invoice table.

SELECT DISTINCT BillingCountry 
FROM chinook.Invoices ;

#6. Provide a query that shows the invoices associated with each sales agent. The resulting table should include the Sales Agent's full name.

SELECT emp.LastName, emp.Firstname, inv.InvoiceId
FROM chinook.Employees emp 
JOIN chinook.Customers cust ON cust.SupportRepId = emp.EmployeeId
JOIN chinook.Invoices Inv ON Inv.CustomerId = cust.CustomerId;

#7. Show the Invoice Total, Customer name, Country, and Sales Agent name for all invoices and customers.

SELECT emp.LastName, emp.Firstname, cust.FirstName, cust.LastName, cust.Country, inv.total
FROM chinook.employees emp 
JOIN chinook.Customers cust ON cust.SupportRepId = emp.EmployeeId
JOIN chinook.Invoices Inv ON Inv.CustomerId = cust.CustomerId;

#8. How many Invoices were there in 2009?

SELECT COUNT(*)
FROM chinook.Invoices
WHERE InvoiceDate BETWEEN '2009-01-01' AND '2009-12-31';

#9. What are the total sales for 2009?

SELECT SUM(Total)
FROM chinook.Invoices
WHERE InvoiceDate BETWEEN '2009-01-01' AND '2009-12-31';

#10. Write a query that includes the purchased track name with each invoice line ID

SELECT t.Name, i.InvoiceLineId
FROM chinook.Invoice_items i
JOIN chinook.Tracks t 
ON i.TrackId = t.TrackId;

#11. Write a query that includes the purchased track name AND artist name with each invoice line ID

SELECT ar.name as Artist, t.Name as Track, i.InvoiceLineId
FROM chinook.Invoice_items i
LEFT JOIN chinook.tracks t 
ON i.TrackID=t.TrackID
INNER JOIN chinook.albums a
ON a.AlbumID=t.AlbumID
LEFT JOIN chinook.artists ar
ON ar.ArtistID=a.ArtistID;

#12. Provide a query that shows all the Tracks, and include the Album name, Media type, and Genre.

SELECT t.Name AS 'Track Name', a.Title AS 'Album Title', m.Name AS 'Media Type', g.Name AS 'Genre'
FROM chinook.tracks t
JOIN chinook.Albums a 
on a.AlbumId = t.AlbumId
JOIN chinook.Media_Types m
on m.MediaTypeId = t.MediaTypeId
JOIN chinook.Genres g
on g.GenreId = t.GenreId;

#13.Show the total sales made by each sales agent.

SELECT emp.FirstName, emp.LastName,
ROUND(SUM(Inv.Total), 2) as 'Total Sales' 
FROM chinook.Employees emp

JOIN chinook.Customers cust 
ON cust.SupportRepId = emp.EmployeeId

JOIN chinook.Invoices Inv 
ON Inv.CustomerId = cust.CustomerId

WHERE emp.Title = 'Sales Support Agent' 
GROUP BY emp.FirstName;

#14. Which sales agent made the most dollars in sales in 2009?

SELECT emp.FirstName, emp.LastName,
ROUND(SUM(Inv.Total), 2) as 'Total Sales' 
FROM chinook.Employees emp

JOIN chinook.Customers cust 
ON cust.SupportRepId = emp.EmployeeId

JOIN chinook.Invoices Inv 
ON Inv.CustomerId = cust.CustomerId

WHERE emp.Title = 'Sales Support Agent' 
AND Inv.InvoiceDate LIKE '2009%' 
GROUP BY emp.FirstName
ORDER BY (round(sum(Inv.Total), 2))  DESC LIMIT 1;

#15 Retrieve all customer names and their email addresses

SELECT FirstName, LastName, Email
FROM Customers; 

#16 Find the total number of invoices.

SELECT COUNT(*) as TotalInvoices 
FROM Invoices;

#17 List all tracks that belong to the 'Rock' genre

SELECT tracks.Name 
FROM tracks 
JOIN genres ON tracks.GenreId = genres.GenreId 
WHERE genres.Name = 'Rock';

#18 Get the names of all artists who have albums

SELECT DISTINCT artists.Name
FROM artists
JOIN albums ON artists.ArtistId = albums.ArtistId;

#19 Find the total sales for each album

SELECT albums.Title, SUM(invoice_items.UnitPrice * invoice_items.Quantity) AS TotalSales
FROM albums
JOIN tracks ON albums.AlbumId = tracks.AlbumId
JOIN invoice_items ON tracks.TrackId = invoice_items.TrackId
GROUP BY albums.Title;

#20 Retrieve the top 5 most expensive tracks

SELECT Name, UnitPrice
FROM tracks
ORDER BY UnitPrice desc LIMIT 5;

#21 List all invoices from the year 2010

SELECT *
FROM invoices 
WHERE strftime('%Y', InvoiceDate) = '2010';

#22 Show the average length of tracks in each playlist

SELECT playlists.Name, AVG(tracks.Milliseconds) AS AvgTrackLength
FROM playlists
JOIN playlist_track ON playlists.PlaylistId = playlist_track.PlaylistId
JOIN tracks ON playlist_track.TrackId = tracks.TrackId
GROUP BY playlists.Name;

#23 Display the number of tracks for each genre

SELECT genres.Name, COUNT(*) AS Number_OfTracks
FROM genres
JOIN tracks ON genres.GenreId = tracks.GenreId
GROUP BY genres.Name;

#24  Categorize total sales per invoice into 'High', 'Medium', or 'Low' categories

SELECT InvoiceId,
       CustomerId,
       Total,
       CASE WHEN total > 100 THEN 'High' 
       WHEN total BETWEEN 50 AND 100 THEN 'Medium'
       ELSE 'low' 
       END AS Sales_Category
  FROM invoices;


#25 List the first and last names of customers along with the number of invoices they have

SELECT customers.FirstName,
       customers.LastName,
       COUNT(invoices.InvoiceId) AS NumberOfInvoices
  FROM customers
       LEFT JOIN
       invoices ON customers.CustomerId = invoices.CustomerId
 GROUP BY customers.FirstName,
          customers.LastName;

#26 Calculate the total duration of all tracks in minutes for each album

SELECT Title,
       (
           SELECT SUM(milliseconds) / 60000.0
             FROM tracks
            WHERE tracks.AlbumId = albums.AlbumID
       )
       AS Total_Duration_Minutes
  FROM albums;

#27 Find the names of customers who made purchases over $50 in a single invoice

SELECT FirstName, LastName 
FROM customers 
WHERE CustomerId IN (
    SELECT CustomerId 
    FROM invoices 
    WHERE Total > 50
);

#28 Retrieve all tracks that do not belong to any playlist

SELECT Name 
FROM tracks 
WHERE TrackId NOT IN (
    SELECT TrackId 
    FROM playlist_track
);

#29 Find the total number of tracks in each media type

SELECT Name 
FROM tracks 
WHERE TrackId NOT IN (
    SELECT TrackId 
    FROM playlist_track
);

#30 Categorize tracks based on their duration

SELECT
    Name,
    Milliseconds, 
CASE WHEN Milliseconds < 180000 THEN 'Short'
    WHEN Milliseconds BETWEEN 180000 AND 300000 THEN 'Average'
    ELSE 'long'
END AS Song_Duration 
From tracks;
